'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.0.3705.6060
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class ReportMenus
    Inherits DataSet
    
    Private tableMenuItem As MenuItemDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("MenuItem")) Is Nothing) Then
                Me.Tables.Add(New MenuItemDataTable(ds.Tables("MenuItem")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MenuItem As MenuItemDataTable
        Get
            Return Me.tableMenuItem
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As ReportMenus = CType(MyBase.Clone,ReportMenus)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("MenuItem")) Is Nothing) Then
            Me.Tables.Add(New MenuItemDataTable(ds.Tables("MenuItem")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableMenuItem = CType(Me.Tables("MenuItem"),MenuItemDataTable)
        If (Not (Me.tableMenuItem) Is Nothing) Then
            Me.tableMenuItem.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "ReportMenus"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/CRYSTAL_REPORTS.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-GB")
        Me.CaseSensitive = false
        Me.EnforceConstraints = false
        Me.tableMenuItem = New MenuItemDataTable
        Me.Tables.Add(Me.tableMenuItem)
    End Sub
    
    Private Function ShouldSerializeMenuItem() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub MenuItemRowChangeEventHandler(ByVal sender As Object, ByVal e As MenuItemRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MenuItemDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDENTITY As DataColumn
        
        Private columnPARENT As DataColumn
        
        Private columnMENUTEXT As DataColumn
        
        Private columnREPORTPATH As DataColumn
        
        Private columnMENUORDER As DataColumn
        
        Private columnMENUTYPE As DataColumn
        
        Friend Sub New()
            MyBase.New("MenuItem")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDENTITYColumn As DataColumn
            Get
                Return Me.columnIDENTITY
            End Get
        End Property
        
        Friend ReadOnly Property PARENTColumn As DataColumn
            Get
                Return Me.columnPARENT
            End Get
        End Property
        
        Friend ReadOnly Property MENUTEXTColumn As DataColumn
            Get
                Return Me.columnMENUTEXT
            End Get
        End Property
        
        Friend ReadOnly Property REPORTPATHColumn As DataColumn
            Get
                Return Me.columnREPORTPATH
            End Get
        End Property
        
        Friend ReadOnly Property MENUORDERColumn As DataColumn
            Get
                Return Me.columnMENUORDER
            End Get
        End Property
        
        Friend ReadOnly Property MENUTYPEColumn As DataColumn
            Get
                Return Me.columnMENUTYPE
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MenuItemRow
            Get
                Return CType(Me.Rows(index),MenuItemRow)
            End Get
        End Property
        
        Public Event MenuItemRowChanged As MenuItemRowChangeEventHandler
        
        Public Event MenuItemRowChanging As MenuItemRowChangeEventHandler
        
        Public Event MenuItemRowDeleted As MenuItemRowChangeEventHandler
        
        Public Event MenuItemRowDeleting As MenuItemRowChangeEventHandler
        
        Public Overloads Sub AddMenuItemRow(ByVal row As MenuItemRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMenuItemRow(ByVal IDENTITY As System.UInt64, ByVal PARENT As System.UInt64, ByVal MENUTEXT As String, ByVal REPORTPATH As String, ByVal MENUORDER As Long, ByVal MENUTYPE As String) As MenuItemRow
            Dim rowMenuItemRow As MenuItemRow = CType(Me.NewRow,MenuItemRow)
            rowMenuItemRow.ItemArray = New Object() {IDENTITY, PARENT, MENUTEXT, REPORTPATH, MENUORDER, MENUTYPE}
            Me.Rows.Add(rowMenuItemRow)
            Return rowMenuItemRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MenuItemDataTable = CType(MyBase.Clone,MenuItemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MenuItemDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDENTITY = Me.Columns("IDENTITY")
            Me.columnPARENT = Me.Columns("PARENT")
            Me.columnMENUTEXT = Me.Columns("MENUTEXT")
            Me.columnREPORTPATH = Me.Columns("REPORTPATH")
            Me.columnMENUORDER = Me.Columns("MENUORDER")
            Me.columnMENUTYPE = Me.Columns("MENUTYPE")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDENTITY = New DataColumn("IDENTITY", GetType(System.UInt64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDENTITY)
            Me.columnPARENT = New DataColumn("PARENT", GetType(System.UInt64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARENT)
            Me.columnMENUTEXT = New DataColumn("MENUTEXT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMENUTEXT)
            Me.columnREPORTPATH = New DataColumn("REPORTPATH", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnREPORTPATH)
            Me.columnMENUORDER = New DataColumn("MENUORDER", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMENUORDER)
            Me.columnMENUTYPE = New DataColumn("MENUTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMENUTYPE)
        End Sub
        
        Public Function NewMenuItemRow() As MenuItemRow
            Return CType(Me.NewRow,MenuItemRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MenuItemRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MenuItemRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MenuItemRowChangedEvent) Is Nothing) Then
                RaiseEvent MenuItemRowChanged(Me, New MenuItemRowChangeEvent(CType(e.Row,MenuItemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MenuItemRowChangingEvent) Is Nothing) Then
                RaiseEvent MenuItemRowChanging(Me, New MenuItemRowChangeEvent(CType(e.Row,MenuItemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MenuItemRowDeletedEvent) Is Nothing) Then
                RaiseEvent MenuItemRowDeleted(Me, New MenuItemRowChangeEvent(CType(e.Row,MenuItemRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MenuItemRowDeletingEvent) Is Nothing) Then
                RaiseEvent MenuItemRowDeleting(Me, New MenuItemRowChangeEvent(CType(e.Row,MenuItemRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMenuItemRow(ByVal row As MenuItemRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MenuItemRow
        Inherits DataRow
        
        Private tableMenuItem As MenuItemDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMenuItem = CType(Me.Table,MenuItemDataTable)
        End Sub
        
        Public Property IDENTITY As System.UInt64
            Get
                Try 
                    Return CType(Me(Me.tableMenuItem.IDENTITYColumn),System.UInt64)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMenuItem.IDENTITYColumn) = value
            End Set
        End Property
        
        Public Property PARENT As System.UInt64
            Get
                Try 
                    Return CType(Me(Me.tableMenuItem.PARENTColumn),System.UInt64)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMenuItem.PARENTColumn) = value
            End Set
        End Property
        
        Public Property MENUTEXT As String
            Get
                Try 
                    Return CType(Me(Me.tableMenuItem.MENUTEXTColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMenuItem.MENUTEXTColumn) = value
            End Set
        End Property
        
        Public Property REPORTPATH As String
            Get
                Try 
                    Return CType(Me(Me.tableMenuItem.REPORTPATHColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMenuItem.REPORTPATHColumn) = value
            End Set
        End Property
        
        Public Property MENUORDER As Long
            Get
                Try 
                    Return CType(Me(Me.tableMenuItem.MENUORDERColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMenuItem.MENUORDERColumn) = value
            End Set
        End Property
        
        Public Property MENUTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tableMenuItem.MENUTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMenuItem.MENUTYPEColumn) = value
            End Set
        End Property
        
        Public Function IsIDENTITYNull() As Boolean
            Return Me.IsNull(Me.tableMenuItem.IDENTITYColumn)
        End Function
        
        Public Sub SetIDENTITYNull()
            Me(Me.tableMenuItem.IDENTITYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARENTNull() As Boolean
            Return Me.IsNull(Me.tableMenuItem.PARENTColumn)
        End Function
        
        Public Sub SetPARENTNull()
            Me(Me.tableMenuItem.PARENTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMENUTEXTNull() As Boolean
            Return Me.IsNull(Me.tableMenuItem.MENUTEXTColumn)
        End Function
        
        Public Sub SetMENUTEXTNull()
            Me(Me.tableMenuItem.MENUTEXTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsREPORTPATHNull() As Boolean
            Return Me.IsNull(Me.tableMenuItem.REPORTPATHColumn)
        End Function
        
        Public Sub SetREPORTPATHNull()
            Me(Me.tableMenuItem.REPORTPATHColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMENUORDERNull() As Boolean
            Return Me.IsNull(Me.tableMenuItem.MENUORDERColumn)
        End Function
        
        Public Sub SetMENUORDERNull()
            Me(Me.tableMenuItem.MENUORDERColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMENUTYPENull() As Boolean
            Return Me.IsNull(Me.tableMenuItem.MENUTYPEColumn)
        End Function
        
        Public Sub SetMENUTYPENull()
            Me(Me.tableMenuItem.MENUTYPEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MenuItemRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MenuItemRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MenuItemRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MenuItemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
