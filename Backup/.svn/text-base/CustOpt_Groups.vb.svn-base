'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.0.3705.6060
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class Groups
    Inherits DataSet
    
    Private tableGROUP As GROUPDataTable
    
    Private table_Option As _OptionDataTable
    
    Private relationGROUP_Option As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("GROUP")) Is Nothing) Then
                Me.Tables.Add(New GROUPDataTable(ds.Tables("GROUP")))
            End If
            If (Not (ds.Tables("Option")) Is Nothing) Then
                Me.Tables.Add(New _OptionDataTable(ds.Tables("Option")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GROUP As GROUPDataTable
        Get
            Return Me.tableGROUP
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _Option As _OptionDataTable
        Get
            Return Me.table_Option
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As Groups = CType(MyBase.Clone,Groups)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("GROUP")) Is Nothing) Then
            Me.Tables.Add(New GROUPDataTable(ds.Tables("GROUP")))
        End If
        If (Not (ds.Tables("Option")) Is Nothing) Then
            Me.Tables.Add(New _OptionDataTable(ds.Tables("Option")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableGROUP = CType(Me.Tables("GROUP"),GROUPDataTable)
        If (Not (Me.tableGROUP) Is Nothing) Then
            Me.tableGROUP.InitVars
        End If
        Me.table_Option = CType(Me.Tables("Option"),_OptionDataTable)
        If (Not (Me.table_Option) Is Nothing) Then
            Me.table_Option.InitVars
        End If
        Me.relationGROUP_Option = Me.Relations("GROUP_Option")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "Groups"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/CustOpt_Groups.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-GB")
        Me.CaseSensitive = false
        Me.EnforceConstraints = false
        Me.tableGROUP = New GROUPDataTable
        Me.Tables.Add(Me.tableGROUP)
        Me.table_Option = New _OptionDataTable
        Me.Tables.Add(Me.table_Option)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("GROUP_Option", New DataColumn() {Me.tableGROUP.GROUP_IdColumn}, New DataColumn() {Me.table_Option.GROUP_IdColumn})
        Me.table_Option.Constraints.Add(fkc)
        fkc.AcceptRejectRule = AcceptRejectRule.None
        fkc.DeleteRule = Rule.Cascade
        fkc.UpdateRule = Rule.Cascade
        Me.relationGROUP_Option = New DataRelation("GROUP_Option", New DataColumn() {Me.tableGROUP.GROUP_IdColumn}, New DataColumn() {Me.table_Option.GROUP_IdColumn}, false)
        Me.relationGROUP_Option.Nested = true
        Me.Relations.Add(Me.relationGROUP_Option)
    End Sub
    
    Private Function ShouldSerializeGROUP() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerialize_Option() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub GROUPRowChangeEventHandler(ByVal sender As Object, ByVal e As GROUPRowChangeEvent)
    
    Public Delegate Sub _OptionRowChangeEventHandler(ByVal sender As Object, ByVal e As _OptionRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GROUPDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnName As DataColumn
        
        Private columnGROUP_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("GROUP")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property NameColumn As DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Friend ReadOnly Property GROUP_IdColumn As DataColumn
            Get
                Return Me.columnGROUP_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GROUPRow
            Get
                Return CType(Me.Rows(index),GROUPRow)
            End Get
        End Property
        
        Public Event GROUPRowChanged As GROUPRowChangeEventHandler
        
        Public Event GROUPRowChanging As GROUPRowChangeEventHandler
        
        Public Event GROUPRowDeleted As GROUPRowChangeEventHandler
        
        Public Event GROUPRowDeleting As GROUPRowChangeEventHandler
        
        Public Overloads Sub AddGROUPRow(ByVal row As GROUPRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGROUPRow(ByVal Name As String) As GROUPRow
            Dim rowGROUPRow As GROUPRow = CType(Me.NewRow,GROUPRow)
            rowGROUPRow.ItemArray = New Object() {Name, Nothing}
            Me.Rows.Add(rowGROUPRow)
            Return rowGROUPRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GROUPDataTable = CType(MyBase.Clone,GROUPDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GROUPDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnName = Me.Columns("Name")
            Me.columnGROUP_Id = Me.Columns("GROUP_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnName = New DataColumn("Name", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnName)
            Me.columnGROUP_Id = New DataColumn("GROUP_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnGROUP_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnGROUP_Id}, true))
            Me.columnName.Namespace = ""
            Me.columnGROUP_Id.AutoIncrement = true
            Me.columnGROUP_Id.AllowDBNull = false
            Me.columnGROUP_Id.Unique = true
        End Sub
        
        Public Function NewGROUPRow() As GROUPRow
            Return CType(Me.NewRow,GROUPRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GROUPRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GROUPRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GROUPRowChangedEvent) Is Nothing) Then
                RaiseEvent GROUPRowChanged(Me, New GROUPRowChangeEvent(CType(e.Row,GROUPRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GROUPRowChangingEvent) Is Nothing) Then
                RaiseEvent GROUPRowChanging(Me, New GROUPRowChangeEvent(CType(e.Row,GROUPRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GROUPRowDeletedEvent) Is Nothing) Then
                RaiseEvent GROUPRowDeleted(Me, New GROUPRowChangeEvent(CType(e.Row,GROUPRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GROUPRowDeletingEvent) Is Nothing) Then
                RaiseEvent GROUPRowDeleting(Me, New GROUPRowChangeEvent(CType(e.Row,GROUPRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGROUPRow(ByVal row As GROUPRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GROUPRow
        Inherits DataRow
        
        Private tableGROUP As GROUPDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGROUP = CType(Me.Table,GROUPDataTable)
        End Sub
        
        Public Property Name As String
            Get
                Try 
                    Return CType(Me(Me.tableGROUP.NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGROUP.NameColumn) = value
            End Set
        End Property
        
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tableGROUP.NameColumn)
        End Function
        
        Public Sub SetNameNull()
            Me(Me.tableGROUP.NameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetOptionRows() As _OptionRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("GROUP_Option")),_OptionRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GROUPRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GROUPRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GROUPRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GROUPRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class _OptionDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnOption_Text As DataColumn
        
        Private columnGROUP_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("Option")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Option_TextColumn As DataColumn
            Get
                Return Me.columnOption_Text
            End Get
        End Property
        
        Friend ReadOnly Property GROUP_IdColumn As DataColumn
            Get
                Return Me.columnGROUP_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As _OptionRow
            Get
                Return CType(Me.Rows(index),_OptionRow)
            End Get
        End Property
        
        Public Event _OptionRowChanged As _OptionRowChangeEventHandler
        
        Public Event _OptionRowChanging As _OptionRowChangeEventHandler
        
        Public Event _OptionRowDeleted As _OptionRowChangeEventHandler
        
        Public Event _OptionRowDeleting As _OptionRowChangeEventHandler
        
        Public Overloads Sub Add_OptionRow(ByVal row As _OptionRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Add_OptionRow(ByVal Option_Text As String, ByVal parentGROUPRowByGROUP_Option As GROUPRow) As _OptionRow
            Dim row_OptionRow As _OptionRow = CType(Me.NewRow,_OptionRow)
            row_OptionRow.ItemArray = New Object() {Option_Text, parentGROUPRowByGROUP_Option(1)}
            Me.Rows.Add(row_OptionRow)
            Return row_OptionRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As _OptionDataTable = CType(MyBase.Clone,_OptionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New _OptionDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnOption_Text = Me.Columns("Option_Text")
            Me.columnGROUP_Id = Me.Columns("GROUP_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnOption_Text = New DataColumn("Option_Text", GetType(System.String), Nothing, System.Data.MappingType.SimpleContent)
            Me.Columns.Add(Me.columnOption_Text)
            Me.columnGROUP_Id = New DataColumn("GROUP_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnGROUP_Id)
        End Sub
        
        Public Function New_OptionRow() As _OptionRow
            Return CType(Me.NewRow,_OptionRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New _OptionRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(_OptionRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me._OptionRowChangedEvent) Is Nothing) Then
                RaiseEvent _OptionRowChanged(Me, New _OptionRowChangeEvent(CType(e.Row,_OptionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me._OptionRowChangingEvent) Is Nothing) Then
                RaiseEvent _OptionRowChanging(Me, New _OptionRowChangeEvent(CType(e.Row,_OptionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me._OptionRowDeletedEvent) Is Nothing) Then
                RaiseEvent _OptionRowDeleted(Me, New _OptionRowChangeEvent(CType(e.Row,_OptionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me._OptionRowDeletingEvent) Is Nothing) Then
                RaiseEvent _OptionRowDeleting(Me, New _OptionRowChangeEvent(CType(e.Row,_OptionRow), e.Action))
            End If
        End Sub
        
        Public Sub Remove_OptionRow(ByVal row As _OptionRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class _OptionRow
        Inherits DataRow
        
        Private table_Option As _OptionDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.table_Option = CType(Me.Table,_OptionDataTable)
        End Sub
        
        Public Property Option_Text As String
            Get
                Try 
                    Return CType(Me(Me.table_Option.Option_TextColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_Option.Option_TextColumn) = value
            End Set
        End Property
        
        Public Property GROUPRow As GROUPRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("GROUP_Option")),GROUPRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("GROUP_Option"))
            End Set
        End Property
        
        Public Function IsOption_TextNull() As Boolean
            Return Me.IsNull(Me.table_Option.Option_TextColumn)
        End Function
        
        Public Sub SetOption_TextNull()
            Me(Me.table_Option.Option_TextColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class _OptionRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As _OptionRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As _OptionRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As _OptionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
