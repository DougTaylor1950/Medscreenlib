'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3603
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3603.
'
Namespace ts011
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="CardiffServiceSoap", [Namespace]:="http://concateno.com/Cardiff")>  _
    Partial Public Class CardiffService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetReceivedSamplesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReceivedSamplesBySMIDProfileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReceivedSamplesByCMOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = "http://ts01/CardiffSoap/service1.asmx"
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetReceivedSamplesCompleted As GetReceivedSamplesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReceivedSamplesBySMIDProfileCompleted As GetReceivedSamplesBySMIDProfileCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReceivedSamplesByCMCompleted As GetReceivedSamplesByCMCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://concateno.com/Cardiff/GetReceivedSamples", RequestNamespace:="http://concateno.com/Cardiff", ResponseNamespace:="http://concateno.com/Cardiff", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReceivedSamples(ByVal FromDate As Date, ByVal stylesheet As String) As String
            Dim results() As Object = Me.Invoke("GetReceivedSamples", New Object() {FromDate, stylesheet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginGetReceivedSamples(ByVal FromDate As Date, ByVal stylesheet As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetReceivedSamples", New Object() {FromDate, stylesheet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetReceivedSamples(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReceivedSamplesAsync(ByVal FromDate As Date, ByVal stylesheet As String)
            Me.GetReceivedSamplesAsync(FromDate, stylesheet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReceivedSamplesAsync(ByVal FromDate As Date, ByVal stylesheet As String, ByVal userState As Object)
            If (Me.GetReceivedSamplesOperationCompleted Is Nothing) Then
                Me.GetReceivedSamplesOperationCompleted = AddressOf Me.OnGetReceivedSamplesOperationCompleted
            End If
            Me.InvokeAsync("GetReceivedSamples", New Object() {FromDate, stylesheet}, Me.GetReceivedSamplesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReceivedSamplesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReceivedSamplesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReceivedSamplesCompleted(Me, New GetReceivedSamplesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://concateno.com/Cardiff/GetReceivedSamplesBySMIDProfile", RequestNamespace:="http://concateno.com/Cardiff", ResponseNamespace:="http://concateno.com/Cardiff", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReceivedSamplesBySMIDProfile(ByVal FromDate As Date, ByVal SMIDProfile As String, ByVal stylesheet As String) As String
            Dim results() As Object = Me.Invoke("GetReceivedSamplesBySMIDProfile", New Object() {FromDate, SMIDProfile, stylesheet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginGetReceivedSamplesBySMIDProfile(ByVal FromDate As Date, ByVal SMIDProfile As String, ByVal stylesheet As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetReceivedSamplesBySMIDProfile", New Object() {FromDate, SMIDProfile, stylesheet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetReceivedSamplesBySMIDProfile(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReceivedSamplesBySMIDProfileAsync(ByVal FromDate As Date, ByVal SMIDProfile As String, ByVal stylesheet As String)
            Me.GetReceivedSamplesBySMIDProfileAsync(FromDate, SMIDProfile, stylesheet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReceivedSamplesBySMIDProfileAsync(ByVal FromDate As Date, ByVal SMIDProfile As String, ByVal stylesheet As String, ByVal userState As Object)
            If (Me.GetReceivedSamplesBySMIDProfileOperationCompleted Is Nothing) Then
                Me.GetReceivedSamplesBySMIDProfileOperationCompleted = AddressOf Me.OnGetReceivedSamplesBySMIDProfileOperationCompleted
            End If
            Me.InvokeAsync("GetReceivedSamplesBySMIDProfile", New Object() {FromDate, SMIDProfile, stylesheet}, Me.GetReceivedSamplesBySMIDProfileOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReceivedSamplesBySMIDProfileOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReceivedSamplesBySMIDProfileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReceivedSamplesBySMIDProfileCompleted(Me, New GetReceivedSamplesBySMIDProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://concateno.com/Cardiff/GetReceivedSamplesByCM", RequestNamespace:="http://concateno.com/Cardiff", ResponseNamespace:="http://concateno.com/Cardiff", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReceivedSamplesByCM(ByVal CM As String, ByVal stylesheet As String) As String
            Dim results() As Object = Me.Invoke("GetReceivedSamplesByCM", New Object() {CM, stylesheet})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginGetReceivedSamplesByCM(ByVal CM As String, ByVal stylesheet As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetReceivedSamplesByCM", New Object() {CM, stylesheet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetReceivedSamplesByCM(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReceivedSamplesByCMAsync(ByVal CM As String, ByVal stylesheet As String)
            Me.GetReceivedSamplesByCMAsync(CM, stylesheet, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReceivedSamplesByCMAsync(ByVal CM As String, ByVal stylesheet As String, ByVal userState As Object)
            If (Me.GetReceivedSamplesByCMOperationCompleted Is Nothing) Then
                Me.GetReceivedSamplesByCMOperationCompleted = AddressOf Me.OnGetReceivedSamplesByCMOperationCompleted
            End If
            Me.InvokeAsync("GetReceivedSamplesByCM", New Object() {CM, stylesheet}, Me.GetReceivedSamplesByCMOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReceivedSamplesByCMOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReceivedSamplesByCMCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReceivedSamplesByCMCompleted(Me, New GetReceivedSamplesByCMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetReceivedSamplesCompletedEventHandler(ByVal sender As Object, ByVal e As GetReceivedSamplesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReceivedSamplesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetReceivedSamplesBySMIDProfileCompletedEventHandler(ByVal sender As Object, ByVal e As GetReceivedSamplesBySMIDProfileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReceivedSamplesBySMIDProfileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetReceivedSamplesByCMCompletedEventHandler(ByVal sender As Object, ByVal e As GetReceivedSamplesByCMCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReceivedSamplesByCMCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
